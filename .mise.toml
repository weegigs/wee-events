[env]
_.file = ".env"

[tools]
pnpm = "latest"
node = "24.2.0"

[tasks.clean-rebuild]
description = "Full clean and rebuild of the entire monorepo"
run = [
    "pnpm run clean",
    "rm -rf node_modules pnpm-lock.yaml",
    "find packages tools -name node_modules -type d -exec rm -rf {} + 2>/dev/null || true",
    "pnpm install",
    "pnpm run build",
]

[tasks.release-preflight]
description = "Comprehensive pre-release validation and safety checks"
run = [
    "echo '🔍 === PRE-RELEASE VALIDATION ==='",
    "echo '📋 1. Git repository validation:'",
    "git status --porcelain | grep -q . && echo '❌ Working directory not clean. Commit or stash changes.' && exit 1 || echo '✅ Working directory clean'",
    "git symbolic-ref HEAD | grep -q refs/heads/main && echo '✅ On main branch' || (echo '❌ Not on main branch' && exit 1)",
    "git fetch origin && git diff --quiet HEAD origin/main && echo '✅ Up to date with origin' || (echo '❌ Local main differs from origin/main' && exit 1)",
    "echo '🔒 2. Security and dependency validation:'",
    "pnpm audit || (echo '❌ High/critical security vulnerabilities found' && exit 1)",
    "echo '✅ No high/critical security vulnerabilities'",
    "echo '📦 3. Package validation:'",
    "pnpm changeset status | grep -q 'No changesets present' && echo '❌ No changesets found for release' && exit 1 || echo '✅ Changesets present'",
    "echo '🏗️  4. Build system validation:'",
    "pnpm run clean || echo 'Clean failed, continuing...'",
    "pnpm install --frozen-lockfile || (echo '❌ Failed to install with frozen lockfile' && exit 1)",
    "echo '✅ Dependencies installed successfully'",
    "echo '🧪 5. Comprehensive testing:'",
    "pnpm run build || (echo '❌ Build failed' && exit 1)",
    "echo '✅ Build successful'",
    "pnpm run test || (echo '❌ Tests failed' && exit 1)",
    "echo '✅ All tests passing'",
    "pnpm run lint || (echo '❌ Linting failed' && exit 1)",
    "echo '✅ Linting passed'",
    "echo '📊 6. Release validation:'",
    "pnpm changeset status",
    "echo '🎯 === PREFLIGHT COMPLETE ==='",
    "echo '✅ All validations passed. Safe to proceed with release.'",
    "echo '📝 Next: mise run release-dry-run'",
]

[tasks.release-dry-run]
description = "Full release simulation without any changes"
run = [
    "echo '🧪 === RELEASE DRY RUN ==='",
    "echo '📋 Current changeset status:'",
    "pnpm changeset status",
    "echo '📝 Simulating version updates:'",
    "echo 'The following packages would be updated:'",
    "pnpm changeset status | grep -E '^  @weegigs/' || echo 'No packages to update'",
    "echo '🏗️  Testing clean build from scratch:'",
    "pnpm run clean",
    "pnpm install --frozen-lockfile",
    "pnpm run build",
    "echo '🧪 Running full test suite:'",
    "pnpm run test",
    "echo '🔍 Validating code quality:'",
    "pnpm lint",
    "echo '📦 Simulating package publication:'",
    "pnpm changeset publish --dry-run",
    "echo '🎯 === DRY RUN COMPLETE ==='",
    "echo '✅ Dry run successful! Release would succeed.'",
    "echo '📝 Next: mise run release-version'",
]

[tasks.release-version]
description = "Update package versions and generate changelogs"
run = [
    "echo '🚀 === VERSION UPDATE PHASE ==='",
    "echo '⚠️  This will modify package.json files and generate CHANGELOGs'",
    "echo '📝 Current git status:'",
    "git status --short",
    "echo '🔄 Running changeset version...'",
    "pnpm changeset version",
    "echo '📊 Changes made:'",
    "git status --short",
    "git diff --name-only",
    "echo '📋 Version changes:'",
    "git diff --unified=0 packages/*/package.json | grep '^[+-].*\"version\"'",
    "echo '🎯 === VERSION UPDATE COMPLETE ==='",
    "echo '✅ Versions updated successfully'",
    "echo '⚠️  IMPORTANT: Review the changes above carefully'",
    "echo '📝 Review CHANGELOGs: find packages -name CHANGELOG.md -exec echo \"=== {} ===\" \\; -exec head -20 {} \\;'",
    "echo '📝 Next: git add . && git commit -m \"Version packages\" && mise run release-publish'",
]

[tasks.release-publish]
description = "Publish packages to npm registry with full validation"
run = [
    "echo '📦 === PUBLICATION PHASE ==='",
    "echo '🔍 Final pre-publish validation:'",
    "git status --porcelain | grep -q . && echo '⚠️  Uncommitted changes detected' || echo '✅ All changes committed'",
    "echo '🌐 Testing npm registry connectivity:'",
    "npm ping || (echo '❌ Cannot reach npm registry' && exit 1)",
    "echo '✅ npm registry accessible'",
    "echo '🔑 Validating npm authentication:'",
    "npm whoami || (echo '❌ Not logged into npm. Run: npm login' && exit 1)",
    "echo '✅ npm authentication valid'",
    "echo '🧪 Final build validation:'",
    "pnpm run build",
    "pnpm run test",
    "echo '📦 Publishing packages...'",
    "pnpm changeset publish",
    "echo '🏷️  Creating git tag and pushing:'",
    "git add .",
    "git diff --cached --quiet || git commit -m 'chore: release packages'",
    "LATEST_VERSION=$(jq -r '.version' packages/core/package.json)",
    "git tag v$LATEST_VERSION",
    "git push origin main",
    "git push origin v$LATEST_VERSION",
    "echo '🎯 === PUBLICATION COMPLETE ==='",
    "echo '🎉 Release published successfully!'",
    "echo '📝 Next: mise run release-verify'",
]

[tasks.release-verify]
description = "Post-release verification and validation"
run = [
    "echo '✅ === POST-RELEASE VERIFICATION ==='",
    "echo '🔍 Verifying published packages:'",
    "sleep 10",
    "echo '📦 Checking package availability on npm:'",
    "find packages -name package.json -exec jq -r .name {} \\; | while read pkg; do echo \"Checking $pkg...\"; npm view \"$pkg\" version --silent || echo \"❌ $pkg not found on registry\"; done",
    "echo '📊 Release summary:'",
    "echo 'Published packages:'",
    "git log --oneline -1",
    "echo 'Git tags:'",
    "git tag --sort=-version:refname | head -5",
    "echo '🎯 === VERIFICATION COMPLETE ==='",
    "echo '✅ Release verification successful!'",
    "echo '📝 Consider: announcement, documentation updates, monitoring'",
]

[tasks.release-rollback]
description = "Emergency rollback procedures"
run = [
    "echo '🚨 === EMERGENCY ROLLBACK ==='",
    "echo '⚠️  WARNING: This will attempt to rollback the release'",
    "echo '📝 Last release commit:'",
    "git log --oneline -1",
    "echo '❌ MANUAL STEPS REQUIRED:'",
    "echo '1. Unpublish packages: npm unpublish <package>@<version>'",
    "echo '2. Revert git commits: git revert HEAD'",
    "echo '3. Delete git tags: git tag -d <tag> && git push origin :refs/tags/<tag>'",
    "echo '4. Restore previous versions in package.json files'",
    "echo '5. Notify stakeholders'",
    "echo '🎯 This task provides guidance only - manual intervention required'",
]

[tasks.release-full]
description = "Complete automated release pipeline (USE WITH CAUTION)"
run = [
    "echo '🚀 === FULL AUTOMATED RELEASE ==='",
    "echo '⚠️  WARNING: This will execute the complete release pipeline'",
    "echo '⏱️  You have 10 seconds to cancel (Ctrl+C)...'",
    "sleep 10",
    "mise run release-preflight",
    "mise run release-dry-run",
    "mise run release-version",
    "echo '⚠️  Pausing before publish. Review changes and press Enter to continue...'",
    "read -p 'Continue with publish? (y/N): ' confirm",
    "[ \"$confirm\" = \"y\" ] || [ \"$confirm\" = \"Y\" ] || (echo 'Cancelled.' && exit 1)",
    "git add . && git commit -m 'chore: version packages'",
    "mise run release-publish",
    "mise run release-verify",
    "echo '🎉 === FULL RELEASE COMPLETE ==='",
    "echo '✅ Automated release pipeline finished successfully!'",
]
